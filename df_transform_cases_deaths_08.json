{
	"name": "df_transform_cases_deaths_08",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "pro_sample_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "sourcecasesanddeaths08"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup09",
						"type": "DatasetReference"
					},
					"name": "CountrylookupNew"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_deaths_08",
						"type": "DatasetReference"
					},
					"name": "sinkforcasesanddeath"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeOnly"
				},
				{
					"name": "selectOnlyRequiredFields08"
				},
				{
					"name": "pivotCount08"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectOnlysink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcecasesanddeaths08",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrylookupNew",
				"sourcecasesanddeaths08 filter(continent == 'Europe' && not(isNull(country_code))) ~> filterEuropeOnly",
				"filterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reorted'+'_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnlyRequiredFields08",
				"selectOnlyRequiredFields08 pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reorted_date),",
				"     pivotBy(indicator, ['Confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotCount08",
				"pivotCount08, CountrylookupNew lookup(pivotCount08@country == CountrylookupNew@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = pivotCount08@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          cases_count = {Confirmed cases_count},",
				"          deaths_count,",
				"          population = pivotCount08@population,",
				"          reorted_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnlysink",
				"selectOnlysink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkforcasesanddeath"
			]
		}
	}
}