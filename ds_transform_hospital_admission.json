{
	"name": "ds_transform_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "HospitaAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_country_look_ups",
						"type": "DatasetReference"
					},
					"name": "CountrySources"
				},
				{
					"dataset": {
						"referenceName": "ds_dimDate_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "weeklysink"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hosptal_admission_daily",
						"type": "DatasetReference"
					},
					"name": "DailySink"
				}
			],
			"transformations": [
				{
					"name": "selectRequiredFileds"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectRequiredFields2"
				},
				{
					"name": "splitDailyfromWeekly"
				},
				{
					"name": "derivedecdcyearweek"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "joinWithDate"
				},
				{
					"name": "pivotweekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "SelectWeekly"
				},
				{
					"name": "SelectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     dateFormats: ['MM/dd/yyyy'],",
				"     preferredIntegralType: 'integer',",
				"     preferredFractionalType: 'decimal') ~> HospitaAdmission",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySources",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDateSource",
				"HospitaAdmission select(mapColumn(",
				"          country,",
				"          indicator,",
				"          ReportedDate = date,",
				"          Reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFileds",
				"selectRequiredFileds, CountrySources lookup(selectRequiredFileds@country == CountrySources@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = selectRequiredFileds@country,",
				"          indicator,",
				"          ReportedDate,",
				"          Reported_year_week,",
				"          value,",
				"          source,",
				"          country = CountrySources@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields2",
				"selectRequiredFields2 split(indicator == 'weekly new Hospital admission per 100k' || indicator == 'weekly new ICU Admission per 100k',",
				"     disjoint: false) ~> splitDailyfromWeekly@(weekly, Daily)",
				"DimDateSource derive(ecdc_year_week = year + '-w' + lpad(week_of_year, 2, '0')) ~> derivedecdcyearweek",
				"derivedecdcyearweek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"splitDailyfromWeekly@weekly, AggDimDate join(Reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDate",
				"joinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweekly",
				"splitDailyfromWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          ReportedDate,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotweekly sort(desc(Reported_year_week, true),",
				"     asc(country, true)) ~> SortWeekly",
				"pivotDaily sort(desc(ReportedDate, true),",
				"     asc(country, true)) ~> SortDaily",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          Reported_year_week,",
				"          source,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hopital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWeekly",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          ReportedDate,",
				"          source,",
				"          { hospital_occupancy_count} = {Daily hospital occupancy_count},",
				"          ICU_occupancy_count = {Daily ICU occupancy_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDaily",
				"SelectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          population as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          Deaths_Count as string,",
				"          {Cases _Count} as string,",
				"          indicator as string,",
				"          daily_count as string,",
				"          continent as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> weeklysink",
				"SelectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          population as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          Deaths_Count as string,",
				"          {Cases _Count} as string,",
				"          indicator as string,",
				"          daily_count as string,",
				"          continent as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DailySink"
			]
		}
	}
}